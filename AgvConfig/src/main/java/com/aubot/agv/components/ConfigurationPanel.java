/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.aubot.agv.components;

import com.aubot.agv.attributes.Attribute;

import javax.swing.*;
import java.awt.*;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;

/**
 *
 * @author ADMIN
 */
public abstract class ConfigurationPanel extends JPanel {

    protected final PropertiesChangeListener listener;

    protected final Attribute<Object> attribute;

    protected final JComponent editorComponent;

    /**
     * Creates new form ConfigurationPanel
     */
    public ConfigurationPanel(PropertiesChangeListener listener, Attribute<Object> attribute, JComponent editor) {
        this.listener = listener;
        this.attribute = attribute;
        this.editorComponent = editor;
        initComponents();
        this.setLayout(new GridBagLayout());
        this.setBorder(BorderFactory.createEmptyBorder(0, 10, 0, 10));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.weightx = 0.3;
        gbc.anchor = GridBagConstraints.CENTER;
        this.add(new JLabel(attribute.getName()), gbc);
        gbc.gridx = 1;
        gbc.weightx = 0.7;
        gbc.anchor = GridBagConstraints.CENTER;
        editor.setPreferredSize(new Dimension(200, 30));
        this.add(editor, gbc);
        editor.addFocusListener(new FocusAdapter() {
            @Override
            public void focusLost(FocusEvent e) {
                if (editorToAttribute()) {
                    listener.onPropertiesChanged(attribute);
                }
            }
        });

        attributeToEditor(attribute.getValue());
    }

    public JComponent getEditorComponent() {
        return editorComponent;
    }

    public void setAttributeValue(Object value) {
        attribute.setValue(value);
        if (value != null) {
            attributeToEditor(value);
        }
    }

    protected abstract boolean editorToAttribute();

    protected abstract void attributeToEditor(Object value);

    public Attribute<Object> getAttribute() {
        return attribute;
    }

    public void clear() {
        attribute.setValue(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(new java.awt.Dimension(100, 50));
        setMinimumSize(new java.awt.Dimension(100, 50));
        setPreferredSize(new java.awt.Dimension(100, 50));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public interface PropertiesChangeListener {

        void onPropertiesChanged(Attribute attr);
    }
}
