package com.aubot.agv;/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import com.aubot.agv.attributes.RfidMapAttribute;
import com.aubot.agv.attributes.RfidProperties;
import com.aubot.agv.components.ConfigurationPanel;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

/**
 *
 * @author long2
 */
public class RfidConfigPanel extends JDialog {
    public static final int RFID_ID_COLUMN = 0;
    public static final int EXTRA_CARD_COLUMN = 1;
    public static final int EX_CONNECT_COLUMN = 2;
    public static final int STOP_TIME_COLUMN = 3;
    public static final int TIME_WAIT_COLUMN = 4;
    private RfidPropTableModel tableModel;
    private RfidMapAttribute rfidMapAttribute;
    private JPopupMenu pm;
    private int selectedRow = -1;
    private final ConfigurationPanel.PropertiesChangeListener listener;
    /**
     * Creates new form MainConfig
     */
    public RfidConfigPanel(JFrame parent, ConfigurationPanel.PropertiesChangeListener listener) {
        super(parent, true);
        this.listener = listener;
        initComponents();
        setTableComponents();
        setTableEditor();
        createPopupMenu();
        this.setTitle("RFID MAP CONFIGURATION - AUBOT");
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setSize(600,400);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void setTableComponents() {
        lblTitleTable.setFont(new Font("Serif", Font.PLAIN, 20));
        tableModel = new RfidPropTableModel(new ArrayList<>());
        tblRfidProp.setModel(tableModel);
        tblRfidProp.setShowGrid(true);

        tableModel.addTableModelListener(e -> {
            if ((e.getFirstRow() + 1) == tableModel.getRowCount()) {
                if (!tableModel.getValueAt(tableModel.getRowCount() - 1, RFID_ID_COLUMN).equals(0)) {
                    tableModel.addRfidProperty(new RfidProperties());
                }
            }
            listener.onPropertiesChanged(rfidMapAttribute);
        });

        btnDone.addActionListener(l -> {
            List<RfidProperties> rfidProperties = tableModel.getRfidPropList();
            boolean isDuplicate = findDuplicates(rfidProperties);
            if(isDuplicate){
                JOptionPane.showMessageDialog(this,"Duplicate RFID!","Duplicate RFID",JOptionPane.ERROR_MESSAGE);
                return;
            }
//            rfidProperties.remove(rfidProperties.size()-1);
//            rfidMapAttribute = (RfidMapAttribute) AttributeFactory.createAttribute(AgvAttribute.RFID_MAP);
//            if (rfidMapAttribute == null){
//                return;
//            }
//            rfidMapAttribute.setValue(rfidProperties);
//
//            this.dispose();
            this.setVisible(false);
        });

        tblRfidProp.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                JTable tableModel = (JTable) e.getSource();
                selectedRow = tableModel.rowAtPoint(e.getPoint());
                if(e.getButton() == 3 && selectedRow >= 0){
                    pm.show(tblRfidProp, e.getX(), e.getY());
                }else {
                    selectedRow = -1;
                }
            }
        });
    }

    private void setTableEditor(){
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        tblRfidProp.setDefaultRenderer(Object.class, centerRenderer);
        tblRfidProp.getColumnModel().getColumn(RFID_ID_COLUMN).setCellRenderer(new R4RfidTableCellRenderer());
        tblRfidProp.getColumnModel().getColumn(RFID_ID_COLUMN).setCellEditor(new UInt32CellEditor(3));
        tblRfidProp.getColumnModel().getColumn(STOP_TIME_COLUMN).setCellEditor(new UInt32CellEditor(9));
        tblRfidProp.getColumnModel().getColumn(TIME_WAIT_COLUMN).setCellEditor(new UInt32CellEditor(9));
    }

    private void createPopupMenu(){
        pm = new JPopupMenu();

        JMenuItem m1 = new JMenuItem("Delete");
        JMenuItem m2 = new JMenuItem("Duplicate");
        pm.add(m1);
        pm.addSeparator();
        pm.add(m2);

        m1.addActionListener(e -> removeRfid(selectedRow));

        m2.addActionListener(e -> duplicateRfid(selectedRow));
    }

    private void removeRfid(int selectedRow){
        tableModel.removeRfidProperty(selectedRow);
    }

    private void duplicateRfid(int selectedRow){
        RfidProperties rp = tableModel.rfidPropList.get(selectedRow);
        RfidProperties dupRfid = new RfidProperties(rp.getId(),rp.isExtraCards(),rp.isExConnection(),rp.getStopTime(),rp.getConnWaitingTime());
        tableModel.addRfidProperty(dupRfid);
    }


    public List<RfidProperties> getRfidMapAttributeValue(){
        List<RfidProperties> rfids = new ArrayList<>(tableModel.rfidPropList);
        rfids.remove(rfids.size() - 1);
        return rfids;
    }

    public void setRfidMapAttributeValue(List<RfidProperties> propsList) {
        tableModel.setRfidPropList(propsList);
    }

    public boolean findDuplicates(List<RfidProperties> rfids)
    {
        final int setSize = rfids.stream().map(RfidProperties::getId).collect(Collectors.toSet()).size();

        return setSize < rfids.size();
    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitleTable = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        btnDone = new javax.swing.JButton();
        scrollTablePanel = new javax.swing.JScrollPane();
        tblRfidProp = new javax.swing.JTable();

        setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);

        lblTitleTable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleTable.setText("Bảng cấu hình thuộc tính thẻ RFID");
//        getContentPane().add(lblTitleTable, java.awt.BorderLayout.PAGE_START);

        btnDone.setText("Done");
        buttonPanel.add(btnDone);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_END);

        scrollTablePanel.setViewportView(tblRfidProp);

        getContentPane().add(scrollTablePanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDone;
    private javax.swing.JLabel lblTitleTable;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JScrollPane scrollTablePanel;
    private javax.swing.JTable tblRfidProp;
    // End of variables declaration//GEN-END:variables

    public static class RfidPropTableModel extends AbstractTableModel{
        private List<RfidProperties> rfidPropList;

        public RfidPropTableModel(List<RfidProperties> rfidProperties) {
            this.rfidPropList = rfidProperties;
            addRfidProperty(new RfidProperties());
        }

        @Override
        public int getRowCount() {
            return rfidPropList.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return String.class;
                case 1:
                case 2:
                    return Boolean.class;
                default:
                    return Object.class;
            }
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "RFID";
                case 1:
                    return "Sub ID?";
                case 2:
                    return "Connection Available";
                case 3:
                    return "Stop time";
                case 4:
                    return "Alarm time";
                default:
                    return "???";
            }
        }

        public void addRfidProperty(RfidProperties rfidProp) {
            rfidPropList.add(rfidProp);
            fireTableDataChanged();
        }

        public void removeRfidProperty(int index) {
            rfidPropList.remove(index);
            fireTableDataChanged();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

        public List<RfidProperties> getRfidPropList(){
            return rfidPropList;
        }

        public void setRfidPropList(List<RfidProperties> props) {
            this.rfidPropList = props;
            addRfidProperty(new RfidProperties());
            fireTableDataChanged();
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return rfidPropList.get(rowIndex).getId();
                case 1:
                    return rfidPropList.get(rowIndex).isExtraCards();
                case 2:
                    return rfidPropList.get(rowIndex).isExConnection();
                case 3:
                    return rfidPropList.get(rowIndex).getStopTime();
                case 4:
                    return rfidPropList.get(rowIndex).getConnWaitingTime();
                default:
                    return null;
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    rfidPropList.get(rowIndex).setId(Integer.parseInt((String) aValue));
                    fireTableRowsUpdated(rowIndex, columnIndex);
                    break;
                case 1:
                    rfidPropList.get(rowIndex).setExtraCards((Boolean) aValue);
                    fireTableRowsUpdated(rowIndex, columnIndex);
                    break;
                case 2:
                    rfidPropList.get(rowIndex).setExConnection((Boolean) aValue);
                    fireTableRowsUpdated(rowIndex, columnIndex);
                    break;
                case 3:
                    if(!aValue.equals("")){
                        rfidPropList.get(rowIndex).setStopTime(Integer.parseInt((String) aValue));
                    }else {
                        rfidPropList.get(rowIndex).setStopTime(0);
                    }
                    fireTableRowsUpdated(rowIndex, columnIndex);
                    break;
                case 4:
                    if(!aValue.equals("")){
                        rfidPropList.get(rowIndex).setConnWaitingTime(Integer.parseInt((String) aValue));
                    }else {
                        rfidPropList.get(rowIndex).setConnWaitingTime(0);
                    }
                    fireTableRowsUpdated(rowIndex, columnIndex);
                    break;
            }
        }

    }
}
