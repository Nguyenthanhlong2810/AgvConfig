package com.aubot.agv;/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import com.aubot.agv.attributes.*;

import javax.swing.*;
import javax.swing.event.CellEditorListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;
import javax.swing.text.PlainDocument;
import java.awt.*;
import java.io.IOException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.EventObject;
import java.util.List;
import java.util.regex.Pattern;

/**
 *
 * @author long2
 */
public class RfidConfigPanel extends javax.swing.JFrame {
    List<RfidProperties> rfidPropertiesList = new ArrayList<>();
    private RfidPropTableModel tableModel;
    /**
     * Creates new form MainConfig
     */
    public RfidConfigPanel() {
        initComponents();
        setTableComponents();
        this.setLocationRelativeTo(null);
        validateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void setTableComponents() {
        tableModel = new RfidPropTableModel(rfidPropertiesList);
        tblRfidProp.setModel(tableModel);
        tblRfidProp.setShowGrid(true);

        tableModel.addTableModelListener(e -> {
            if ((e.getLastRow() + 1) == tableModel.getRowCount()) {
                if (!tableModel.getValueAt(tableModel.getRowCount() - 1, 0).equals("")) {
                    tableModel.addRfidProperty(new RfidProperties());
                }
            }
        });

        btn_Config.addActionListener(l -> {
            List<RfidProperties> rfidProperties = tableModel.getRfidPropList();
            rfidProperties.remove(rfidProperties.size()-1);
            Attribute<List<RfidProperties>> rfidMapAttribute = AttributeFactory.createAttribute(AgvAttribute.RFID_MAP);
            if (rfidMapAttribute == null){
                return;
            }
            rfidMapAttribute.setValue(rfidProperties);
            try {
                byte[] bytes = rfidMapAttribute.encode();
            } catch (IOException e) {
                e.printStackTrace();
            }

        });
    }

    private void validateTable(){
        JTextField textField = new JTextField();
        limitCharacters(textField, 4);
        tblRfidProp.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(textField));

    }

    private void limitCharacters(JTextField textField, final int limit) {
        PlainDocument document = (PlainDocument) textField.getDocument();

        document.setDocumentFilter(new DocumentFilter() {
            @Override
            public void replace(DocumentFilter.FilterBypass fb, int offset,
                                int length, String text, AttributeSet attrs)
                    throws BadLocationException {
                String string = fb.getDocument().getText(0,
                        fb.getDocument().getLength())
                        + text;

                String pattern ="O{1}[0-9]{1,3}";
                if(string.length() > 1 && !Pattern.matches(pattern, string)){
                    return;
                }
                if (string.length() <= limit)
                    super.replace(fb, offset, length, text, attrs);
            }

            @Override
            public void remove(FilterBypass fb, int offset, int length) throws BadLocationException {
                String s= fb.getDocument().getText(0, fb.getDocument().getLength());
                if(s.equals("O")){
                    return;
                }
                super.remove(fb, offset, length);
            }
        });

    }

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitleTable = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        btn_Config = new javax.swing.JButton();
        scrollTablePanel = new javax.swing.JScrollPane();
        tblRfidProp = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitleTable.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitleTable.setText("Bảng cấu hình thuộc tính thẻ RFID");
        lblTitleTable.setToolTipText("");
        getContentPane().add(lblTitleTable, java.awt.BorderLayout.PAGE_START);

        btn_Config.setText("Config");
        buttonPanel.add(btn_Config);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_END);

        scrollTablePanel.setViewportView(tblRfidProp);

        getContentPane().add(scrollTablePanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Config;
    private javax.swing.JLabel lblTitleTable;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JScrollPane scrollTablePanel;
    private javax.swing.JTable tblRfidProp;
    // End of variables declaration//GEN-END:variables

    public static class RfidPropTableModel extends AbstractTableModel{

        private final List<RfidProperties> rfidPropList;

        public RfidPropTableModel(List<RfidProperties> rfidProperties) {
            this.rfidPropList = rfidProperties;
            addRfidProperty(new RfidProperties());
        }

        @Override
        public int getRowCount() {
            return rfidPropList.size();
        }

        @Override
        public int getColumnCount() {
            return 5;
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return String.class;
                case 1:
                case 2:
                    return Boolean.class;
                default:
                    return Object.class;
            }
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "Mã thẻ";
                case 1:
                    return "Có thẻ phụ";
                case 2:
                    return "Có kết nối ngoài";
                case 3:
                    return "Thời gian dừng";
                case 4:
                    return "Thời gian đợi kết nối";
                default:
                    return "???";
            }
        }

        public void addRfidProperty(RfidProperties rfidProp) {
            rfidPropList.add(rfidProp);
            fireTableDataChanged();
        }

        @Override
        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return true;
        }

        public List<RfidProperties> getRfidPropList(){
            return rfidPropList;
        }


        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    return rfidPropList.get(rowIndex).getId();
                case 1:
                    return rfidPropList.get(rowIndex).isExtraCards();
                case 2:
                    return rfidPropList.get(rowIndex).isExConnection();
                case 3:
                    return rfidPropList.get(rowIndex).getStopTime();
                case 4:
                    return rfidPropList.get(rowIndex).getConnWaitingTime();
                default:
                    return null;
            }
        }

        @Override
        public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
            switch (columnIndex) {
                case 0:
                    rfidPropList.get(rowIndex).setId((String) aValue);
                    fireTableRowsUpdated(rowIndex, rowIndex);
                    break;
                case 1:
                    rfidPropList.get(rowIndex).setExtraCards((Boolean) aValue);
                    fireTableRowsUpdated(rowIndex, rowIndex);
                    break;
                case 2:
                    rfidPropList.get(rowIndex).setExConnection((Boolean) aValue);
                    fireTableRowsUpdated(rowIndex, rowIndex);
                    break;
                case 3:
                    rfidPropList.get(rowIndex).setStopTime(Integer.parseInt((String) aValue));
                    fireTableRowsUpdated(rowIndex, rowIndex);
                    break;
                case 4:
                    rfidPropList.get(rowIndex).setConnWaitingTime(Integer.parseInt((String) aValue));
                    fireTableRowsUpdated(rowIndex, rowIndex);
                    break;
            }
        }

    }
}
